const fs = require("fs");
const {Model} = require('mongoose')

class GeneralController {
    /**It generates the class instance and creates the input stream for the dataset. */
    constructor(name, model, datasetPath) {
        if (this.constructor === GeneralController) {
            throw new Error("Class is of abstract type and can't be instantiated");
        } else {
            this.name = name
            this.model = model
            this.datasetPath = datasetPath
            this.stream = null
        }
    }

    /** It runs a {@link Collection.findOne} to see if the model is empty. */
    async isEmpty() {
        const found = await this.model.findOne()
        return found === null
    }

    async loadDataset2() {
        try {
            // Push the data into the model if it's empty
            if (await this.isEmpty()) {
                let jsonData = JSON.parse(fs.readFileSync(this.datasetPath, 'utf-8'))
                await this.model.insertMany(jsonData)
                console.log("Model", this.name, "loaded.")
            } else {
                console.log("Model", this.name, "wasn't empty.")
            }
        } catch (error) {
            console.error('Error loading data from JSON file:\n', error)
            throw error
        }
    }

    /** It uses the stream generated by the {@link constructor}
     * to read the JSON and pushes the dataset into its Model database. */
    async uploadChunks() {
        this.stream.on('start', await function(){
            this.model.insertMany(JSON.parse(this.datasetPath))
        })

        this.stream.on('data', await function(chunk) {
            console.log('inserting:',chunk.length)
            this.model.insertOne(JSON.parse(chunk.toString('utf-8')))
        })

        this.stream.on('end', await function() {
            console.log('Ended stream of', this.name, 'dataset')
            this.stream.close()
        })

        this.stream.on('err', await function(err) {
            throw err
        })
    }

    /** It imports the dataset to MongoDB calling {@link uploadChunks} promise. */
    async loadDataset(){
        if (await this.isEmpty()) {
            try {
                this.stream = fs.createReadStream(this.datasetPath, {encoding: 'utf-8'});
                await this.uploadChunks()
                    .then((result) => {
                        console.log('Successfully loaded', this.name, 'dataset:', result)
                        this.stream.close()
                    })
                    .catch((err) => {
                        console.error('Error occurred while loading', this.name, 'dataset')
                        console.error('stream:', this.stream, 'datapath:', this.datasetPath)
                        throw err
                    })
            } catch(err) {
                console.error("Failed to load " + this.name + ": json not found.\n", err)
                throw err
            }
        } else {
            console.log(this.name, "wasn't empty!");
        }
    }
}

module.exports = GeneralController
